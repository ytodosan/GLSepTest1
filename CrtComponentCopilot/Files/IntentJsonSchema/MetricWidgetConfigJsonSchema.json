{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "description": {
      "description": "A natural language explanation of the generated component.\r\nExample. \"This chart can be used for showing count of something.\"",
      "type": "string"
    },
    "details": {
      "description": "Extra technical information about the component, it's filters and aggregation.\r\nExample:\r\nDetails about the widget, such as style, data displayed, filters applied, formatting, etc.\r\nProvide information in the following exact format:\r\n- Each category (e.g., Style, Filters applied, Formatting, etc.) must be on a separate line, followed by a colon.\r\n- Each detail within a category must start with \"- \".\r\n- There must be a blank line between categories.\r\nExample:\r\nStyle:\r\n- Simple indicator metric\r\n\r\nFilters applied:\r\n- CreatedOn is within the current year\r\n- IsPrimary is false (existing customer)\r\n\r\nFormatting:\r\n- No decimal places\r\n- Thousands abbreviated\r\n- Trailing zeros trimmed\r\n\r\nData displayed:\r\n- Count of opportunities",
      "type": "string"
    },
    "element": {
      "$ref": "#/$defs/LLMIndicatorWidgetConfig"
    }
  },
  "required": [
    "description",
    "details",
    "element"
  ],
  "type": "object",
  "$defs": {
    "BackwardReferenceAggregationType": {
      "description": "Defines how records in backward reference relation should be aggregated.",
      "enum": [
        "COUNT",
        "SUM",
        "MIN",
        "MAX",
        "AVG",
        "EXISTS",
        "NOT_EXISTS"
      ],
      "type": "string"
    },
    "BackwardReferenceComparisonType": {
      "description": "Defines how records in backward reference relation should be compared.\nIf user asks to filter by column with date-related values, or mentions some numeric value you cannot use NULL.\nuse EQUAL if aggregationType is EXISTS or NOT_EXISTS.",
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "LESS",
        "LESS_OR_EQUAL",
        "GREATER",
        "GREATER_OR_EQUAL"
      ],
      "type": "string"
    },
    "BackwardReferenceFilter": {
      "additionalProperties": false,
      "description": "Filter for filtering entities by backward reference.\nUse it when you need to filter entities with backward reference relation",
      "properties": {
        "aggregationType": {
          "$ref": "#/$defs/BackwardReferenceAggregationType"
        },
        "aggregationValue": {
          "description": "value to compare with the result of aggregation.\nAlways provide a value, when use any aggregation type except EXISTS and NOT_EXISTS.\nExamples: 1. show count of products which contains feature 'Video memory' - value will be null,\nbecause user does not specify any value to compare with and asked\nonly to count rows which satisfy the condition exists.\nExample 2: Show count of accounts which have more than 10 cases - value will be 10.\nExample 3: Show count of accounts which have first created case in 2023 - value will be \"2023-01-01T00:00:00Z\"",
          "type": "string"
        },
        "columnPath": {
          "description": "path to the column in the backward reference relation.\nIt has specific format: \"[BackwardReferenceEntityName:ColumnInBackwardReferenceEntityToLink].ColumnInMainEntityToLink\".\nExample: user prompt - \"show me count of contacts which are owners of activity\". In this example,\nthe columnPath will be \"[Activity:Owner].Id\".\nExplanation: In this example, contact is main entity,\nbecause we create a widget to show count of contacts.\nActivity is backward reference entity, which has a lookup column Owner to Contact entity.\n\nOther example: \"show count of marketing campaigns for brand Neckew\". In this example,\nthere is a backward reference relation from Brand to CampaignPlanner.\nthe columnPath will be [CampaignPlanner:Brand].Id",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/BackwardReferenceComparisonType"
        },
        "subFilters": {
          "$ref": "#/$defs/FilterGroup"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "aggregationType",
        "aggregationValue",
        "subFilters"
      ],
      "type": "object"
    },
    "BooleanComparisonFilter": {
      "additionalProperties": false,
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "const": "EQUAL",
          "type": "string"
        },
        "value": {
          "description": "Boolean value to compare with. For example, true or false",
          "type": "boolean"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "DateComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing columns with date.\nUse it when you need to compare with absolute date. Do not use it for relative dates",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/DateComparisonType"
        },
        "value": {
          "description": "Date in ISO format, for example \"2023-10-01T00:00:00Z\"",
          "type": "string"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "DateComparisonType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "LESS",
        "LESS_OR_EQUAL",
        "GREATER",
        "GREATER_OR_EQUAL"
      ],
      "type": "string"
    },
    "FilterGroup": {
      "additionalProperties": false,
      "description": "Group of filters, which can be combined by logical operation.\nFilter group can contain other filter groups.",
      "properties": {
        "backwardReferenceFilters": {
          "description": "if you need to filter by backward reference relation, use this property.",
          "items": {
            "$ref": "#/$defs/BackwardReferenceFilter"
          },
          "type": "array"
        },
        "filters": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/BooleanComparisonFilter"
              },
              {
                "$ref": "#/$defs/MathComparisonFilter"
              },
              {
                "$ref": "#/$defs/StringComparisonFilter"
              },
              {
                "$ref": "#/$defs/DateComparisonFilter"
              },
              {
                "$ref": "#/$defs/RelativeDateComparisonFilter"
              },
              {
                "$ref": "#/$defs/LookupComparisonFilter"
              },
              {
                "$ref": "#/$defs/IsNullComparisonFilter"
              },
              {
                "$ref": "#/$defs/IsNotNullComparisonFilter"
              },
              {
                "$ref": "#/$defs/FilterGroup"
              }
            ]
          },
          "type": "array"
        },
        "logicalOperation": {
          "description": "Logical operation to combine filters in the group. Default is \"AND\"",
          "enum": [
            "AND",
            "OR"
          ],
          "type": "string"
        }
      },
      "required": [
        "filters",
        "backwardReferenceFilters",
        "logicalOperation"
      ],
      "type": "object"
    },
    "FontSize": {
      "enum": [
        "extra-small",
        "small",
        "medium",
        "large",
        "extra-large"
      ],
      "type": "string"
    },
    "IndicatorWidgetColorType": {
      "anyOf": [
        {
          "$ref": "#/$defs/WidgetColor"
        },
        {
          "const": "transparent",
          "type": "string"
        }
      ]
    },
    "IsNotNullComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing columns with not null values.\nUse it when you need to check if a column is not null.",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "const": "IS_NOT_NULL",
          "type": "string"
        }
      },
      "required": [
        "columnPath",
        "comparisonType"
      ],
      "type": "object"
    },
    "IsNullComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing columns with null values.\nUse it when you need to check if a column is null.",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "const": "IS_NULL",
          "type": "string"
        }
      },
      "required": [
        "columnPath",
        "comparisonType"
      ],
      "type": "object"
    },
    "LLMIndicatorWidgetConfig": {
      "additionalProperties": false,
      "description": "Configuration for the LLM Indicator Widget.\r\nDefines how the widget should be displayed, including title, theme,data of the widget, and layout.",
      "properties": {
        "data": {
          "additionalProperties": false,
          "description": "Data configuration for the indicator widget.\r\nDefines how aggregate and filter data",
          "properties": {
            "filters": {
              "$ref": "#/$defs/FilterGroup"
            },
            "formatting": {
              "$ref": "#/$defs/NumberFormat"
            },
            "from": {
              "description": "The name of the schema from which to provide data.\r\nExample: \"Account\"",
              "type": "string"
            },
            "select": {
              "description": "Describes aggregation configuration for the widget data.\r\nConsists of the aggregation function and the column to aggregate.\r\nPossible aggregation functions:\r\n- SUM\r\n- COUNT\r\n- AVG\r\n- MIN\r\n- MAX\r\nExample: COUNT(Id), SUM(Amount), AVG(Price). if used with a reference table, it can be like this:\r\nSUM(Account.Balance), COUNT(AnnualRevenue.FromBaseCurrency)",
              "type": "string"
            }
          },
          "required": [
            "select",
            "from",
            "filters",
            "formatting"
          ],
          "type": "object"
        },
        "layout": {
          "additionalProperties": false,
          "description": "Layout configuration for the indicator widget.\r\nControls the visual appearance including colors, sizing, and element arrangement.",
          "properties": {
            "color": {
              "$ref": "#/$defs/IndicatorWidgetColorType"
            }
          },
          "required": [
            "color"
          ],
          "type": "object"
        },
        "text": {
          "additionalProperties": false,
          "description": "Defines variables, related to displaying of a text in widget",
          "properties": {
            "fontSizeMode": {
              "$ref": "#/$defs/FontSize"
            },
            "metricMacros": {
              "const": "{0}",
              "type": "string"
            },
            "template": {
              "const": "{0}",
              "type": "string"
            }
          },
          "required": [
            "template",
            "metricMacros",
            "fontSizeMode"
          ],
          "type": "object"
        },
        "theme": {
          "$ref": "#/$defs/WidgetTheme"
        },
        "title": {
          "description": "The title text displayed in the widget header.\r\nIt should start with a capital letter, and all other words should be in lowercase (except proper nouns).\r\nDo not include time periods, such as \"(Last 2 Years)\", \"(Monthly)\", or similar phrases.",
          "type": "string"
        },
        "type": {
          "const": "crt.IndicatorWidget",
          "description": "The type of the widget.\r\nUsed to identify the widget type in the system.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "title",
        "theme",
        "data",
        "layout",
        "text"
      ],
      "type": "object"
    },
    "LookupComparisonFilter": {
      "additionalProperties": false,
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/LookupComparisonType"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Id of the lookup value to compare with or array of ids.\nExamples:\n- \"59970ea3-1ee6-4b13-af5a-26908a5e3de4\"\n- [\"59970ea3-1ee6-4b13-af5a-26908a5e3de4\", \"69111d53-5d21-4133-913f-2d499c642d79\"]"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "LookupComparisonType": {
      "description": "Allows to compare column with lookup values (single or multiple).\nExample of comparing column with multiple lookup values:\n1. In case \"from USA or UK\"\nfilter should be `{\n\"columnPath\": \"CountryId\",\n\"comparisonType\": \"EQUAL\" ,\n\"value\": [\"f7bf32c8-f36b-1410-fc98-00155d043204\", \"69111d53-5d21-4133-913f-2d499c642d79\"]\n}`",
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "EXISTS",
        "NOT_EXISTS"
      ],
      "type": "string"
    },
    "MathComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing columns with numbers. Use it when you need to compare numbers.",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/MathComparisonType"
        },
        "value": {
          "description": "Number value to compare with. For example, 125",
          "type": "number"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "MathComparisonType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "LESS",
        "LESS_OR_EQUAL",
        "GREATER",
        "GREATER_OR_EQUAL"
      ],
      "type": "string"
    },
    "NumberFormat": {
      "additionalProperties": false,
      "description": "Configuration for number formatting operations.\r\nExtends the base Format interface with number-specific formatting options.\r\nUsed to define how numeric values should be formatted, displayed, and presented in the system.",
      "properties": {
        "decimalPrecision": {
          "default": 0,
          "description": "Number of decimal places to display.\r\nControls the rounding and display precision of numeric values.",
          "type": "number"
        },
        "decimalSeparator": {
          "default": ".",
          "description": "Character used to separate the integer part from the decimal part of a number.\r\nCommon values include \".\" (period) or \",\" (comma) depending on locale.",
          "type": "string"
        },
        "thousandAbbreviation": {
          "additionalProperties": false,
          "description": "Configuration for abbreviating large numbers.\r\nWhen enabled, large numbers like 1,000,000 might be displayed as \"1M\".",
          "properties": {
            "enabled": {
              "description": "Whether number abbreviation is enabled.\r\nWhen true, large numbers will be abbreviated using suffixes (K, M, B, etc.).",
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "type": "object"
        },
        "thousandSeparator": {
          "default": ",",
          "description": "Character used to group digits in the integer part.\r\nCommon values include ',' (comma) or '.' (period) or ' ' (space) depending on locale.\r\nFor example, with thousandSeparator: ',', the number 1000000 would display as \"1,000,000\".",
          "type": "string"
        },
        "trimTrailingZeros": {
          "description": "Whether to remove trailing zeros in the decimal part.\r\nWhen true, formats like \"10.00\" would be displayed as \"10\".",
          "type": "boolean"
        },
        "type": {
          "const": "number",
          "description": "Identifies this as a number format configuration.\r\nAlways set to 'number' to indicate the format type.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "decimalPrecision",
        "decimalSeparator",
        "thousandAbbreviation",
        "thousandSeparator",
        "trimTrailingZeros"
      ],
      "type": "object"
    },
    "RelativeDateComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing columns with date.\nUse it when you need to compare with relative date. Do not use it for absolute dates.",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/RelativeDateComparisonType"
        },
        "value": {
          "description": "function-calling string, which is composed of relative date parts.\nPart 1 can be \"PREVIOUS\", \"CURRENT\" or \"NEXT\",\npart 2 can be \"HOUR\", \"DAY\", \"WEEK\", \"MONTH\", \"QUARTER\", \"HALFYEAR\", \"YEAR\".\nBetween them is underscore \"_\". part 3 is call of the function with number as argument\nFor example, \"PREVIOUS_WEEK()\" or \"NEXT_MONTH()\".\nNote, Yesterday, Today, Tomorrow are cast to \"PREVIOUS_DAY()\", \"CURRENT_DAY()\" and \"NEXT_DAY()\"\nAlso, allowed functions are:\nDAY_OF_WEEK(n) - (example: \"DAY_OF_WEEK(2)\" means \"each Monday\"). n - number of day of week starting from Sunday:\n1 - Sunday, 2 - Monday, 3 - Tuesday, 4 - Wednesday, 5 - Thursday, 6 - Friday, 7 - Saturday.\nDAY_OF_MONTH(n) - (example: \"DAY_OF_MONTH(14)\" means \"each 14th day of the month\"),\nMONTH(n) - (example: \"MONTH(5)\" means \"each May\"),\nEXACT_YEAR(n) - (example: \"EXACT_YEAR(1985)\" means \"in 1985\"),\nEXACT_TIME(h,m,s) - (example: \"EXACT_TIME(15,20,0)\" means \"at 15:20:00\")\nWITHIN_PREV_HOURS(n), WITHIN_NEXT_HOURS(n) - means \"within the last n hours\" and \"within the next n hours\" respectively.\nWITHIN_PREV_DAYS(n), WITHIN_NEXT_DAYS(n) - means \"within the last n days\" and \"within the next n days\" respectively.\nANNIVERSARY_TODAY() - means \"each year, today\"\nANNIVERSARY_EXACTLY_IN_DAYS(n) - means \"each year, exactly in n days after today\"\nANNIVERSARY_WITHIN_NEXTDAYS(n) - means \"each year, within the next n days\"\nANNIVERSARY_WITHIN_PREVDAYS(n) - means \"each year, within the previous n days\"",
          "type": "string"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "RelativeDateComparisonType": {
      "description": "Specifics of working with periods:\nIf value is period (PREVIOUS_YEAR(), CURRENT_MONTH(), etc.),\nuse comparisonType \"EQUAL\" to check if the date is in that period.\nExample:\n1. In case \"created in the previous month\"\n\tfilter should be `{ \"columnPath\": \"CreatedOn\", \"comparisonType\": \"EQUAL\" , \"value\": \"PREVIOUS_MONTH()\" }`",
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "LESS",
        "LESS_OR_EQUAL",
        "GREATER",
        "GREATER_OR_EQUAL"
      ],
      "type": "string"
    },
    "StringComparisonFilter": {
      "additionalProperties": false,
      "description": "Filter for comparing values.\nUse it when you need to compare strings. Do not use for dates.\nDo not use it for lookup filters.",
      "properties": {
        "columnPath": {
          "description": "name of column to filter by. By default, it is a column name, for example \"Age\"",
          "type": "string"
        },
        "comparisonType": {
          "$ref": "#/$defs/StringComparisonType"
        },
        "value": {
          "description": "String value to compare with. For example, \"John Doe\"",
          "type": "string"
        }
      },
      "required": [
        "columnPath",
        "comparisonType",
        "value"
      ],
      "type": "object"
    },
    "StringComparisonType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "START_WITH",
        "NOT_START_WITH",
        "CONTAIN",
        "NOT_CONTAIN",
        "END_WITH",
        "NOT_END_WITH",
        "EXISTS",
        "NOT_EXISTS"
      ],
      "type": "string"
    },
    "WidgetColor": {
      "description": "Color options available for widgets in the system.\r\nEach color has a specific semantic use case in dashboards and visualizations.",
      "enum": [
        "burnt-coral",
        "cadmium-red",
        "forest-green",
        "steel-blue",
        "vivid-purple",
        "rusty-orange",
        "dark-turquoise",
        "green",
        "light-blue",
        "celestial-blue",
        "bright-red",
        "orange-red",
        "orange",
        "light-green",
        "turquoise",
        "dark-green",
        "red",
        "coral",
        "purple",
        "violet",
        "blue",
        "navy-blue",
        "dark-blue"
      ],
      "type": "string"
    },
    "WidgetTheme": {
      "description": "Defines the visual theme style for widgets.\r\nEach theme affects how the widget is visually presented in the UI. when used in {LLMIndicatorWidgetConfig.theme} use by default {without-fill}.",
      "enum": [
        "full-fill",
        "without-fill",
        "partial-fill",
        "glassmorphism",
        "transparent"
      ],
      "type": "string"
    }
  }
}