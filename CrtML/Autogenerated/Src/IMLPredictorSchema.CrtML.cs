namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: IMLPredictorSchema

	/// <exclude/>
	public class IMLPredictorSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public IMLPredictorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public IMLPredictorSchema(IMLPredictorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("aeb1fe7c-c682-4da4-9982-b4e533fa8b82");
			Name = "IMLPredictor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("73704ec6-562c-4400-8a4a-17477a18625f");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,4,0,205,86,225,106,219,48,16,254,157,66,223,225,200,159,109,96,236,7,152,235,63,43,148,128,195,2,203,30,64,177,207,169,58,91,50,146,188,205,27,123,247,233,36,59,118,157,174,201,186,36,43,132,32,89,223,157,238,190,239,36,157,96,21,234,154,101,8,107,84,138,105,89,152,240,131,20,5,223,54,138,25,46,69,184,76,175,175,126,94,95,205,26,205,197,22,62,181,218,96,245,126,50,183,38,101,137,25,225,117,120,135,2,21,207,6,204,216,179,194,112,165,100,134,90,63,222,198,162,45,62,138,34,136,117,83,85,76,181,73,55,95,8,131,170,160,8,11,169,128,87,117,137,21,10,227,172,52,200,2,106,133,57,207,140,84,218,33,150,41,24,166,191,232,176,247,23,77,28,198,166,173,177,102,138,85,32,108,246,55,243,245,199,198,204,147,245,61,2,173,144,75,99,199,178,49,97,28,237,176,100,93,55,155,146,103,192,119,17,45,150,233,170,223,61,38,55,132,34,178,246,50,113,31,214,138,163,6,35,251,144,195,29,50,154,66,227,113,128,149,204,177,244,116,205,19,155,159,155,67,246,72,166,56,218,133,185,239,32,103,134,249,12,185,168,27,3,52,127,222,66,161,110,202,142,21,63,30,81,125,112,191,1,247,89,163,90,91,57,230,9,141,156,50,240,141,155,251,145,43,192,239,70,49,112,246,122,223,175,66,211,40,161,147,69,1,25,19,111,76,111,9,221,2,196,89,82,176,82,99,28,101,137,53,239,241,228,96,35,101,105,89,111,59,145,222,46,211,229,64,37,140,104,13,224,214,7,99,53,136,181,81,182,108,3,144,155,7,91,211,137,99,43,32,119,51,91,19,64,50,119,148,4,182,216,110,237,226,106,47,93,216,103,0,110,64,52,101,249,206,87,250,211,5,210,57,210,61,229,155,22,182,252,43,138,177,108,127,83,51,139,124,84,47,60,183,199,134,23,28,213,169,139,229,28,114,15,156,118,100,76,164,117,50,244,186,222,53,60,135,46,227,195,82,94,64,53,218,7,10,37,171,78,63,98,222,180,231,215,206,239,67,166,164,159,159,29,109,252,202,100,116,179,62,161,115,139,230,223,14,186,247,189,96,37,215,238,198,83,152,73,149,235,139,222,212,169,221,123,158,164,147,8,94,157,116,20,160,127,244,224,136,251,117,225,224,127,62,154,254,108,18,200,95,181,47,147,123,246,235,31,250,8,162,1,109,84,63,48,63,65,83,177,114,244,218,131,216,245,20,79,243,143,54,40,61,237,51,158,233,82,236,31,221,201,180,120,84,119,50,202,105,232,84,184,128,46,188,0,14,119,45,167,126,148,46,213,194,12,132,247,82,172,254,207,17,56,182,248,131,94,21,152,134,222,151,182,253,253,6,132,148,107,171,177,11,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("aeb1fe7c-c682-4da4-9982-b4e533fa8b82"));
		}

		#endregion

	}

	#endregion

}

